cmake_minimum_required(VERSION 2.8.12)
cmake_policy(VERSION 2.8.12)
if (POLICY CMP0069)
  cmake_policy(SET CMP0069 NEW)
endif()
project(diablo)
include(ExternalProject)

# Versioning
set(DIABLO_MAJOR_VERSION 1)
set(DIABLO_MINOR_VERSION 0)
set(DEB_PACKAGE_VERSION 1)

include(CMakeDependentOption)
include(cmake/LTO.cmake)
include(cmake/VersionFromVCS.cmake)
include(cmake/functions_macros.cmake)
include(cmake/GeneralConfigureValues.cmake)# These need to be included/generated *before* we use their values
include(cmake/libcxx.cmake)

if (NOT ${MY_SIZEOF_VOIDP} EQUAL ${CMAKE_SIZEOF_VOID_P})
  message(FATAL_ERROR "Detected pointer size is ${MY_SIZEOF_VOIDP}, but cached value is ${CMAKE_SIZEOF_VOID_P}. \
This is probably because you have reconfigured the build system to generate another type of target binary (e.g., now 64-bit instead of 32-bit). \
This is not possible because of the cached value of CMAKE_SIZEOF_VOID_P. You need to create a new build directory and start from scratch.")
endif()

find_package(BISON)
find_package(FLEX)

# set up include-directories
include_directories(
  "${PROJECT_SOURCE_DIR}"   # to find foo/foo.h
  "${PROJECT_BINARY_DIR}")  # to find foo/config.h

set(diablo_configs_dir ${PROJECT_BINARY_DIR}/configs)
file(MAKE_DIRECTORY ${diablo_configs_dir})
include_directories(${diablo_configs_dir})

# Set the output directory for executables
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

option(BUILD_SHARED_LIBS "Generate libraries" ON)
string(APPEND CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")

# Allow Diablo binaries to find the shared libraries also built from the source, when installed somewhere else
SET(CMAKE_SKIP_RPATH TRUE)
APPEND_CMAKE_INSTALL_RPATH("../lib32")
APPEND_CMAKE_INSTALL_RPATH("../lib")
APPEND_CMAKE_INSTALL_RPATH("./lib")

# Generate a compilation database
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# We require C++0x and gnu99
set(CMAKE_CXX_FLAGS "-std=c++14 ${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS "-std=gnu99 ${CMAKE_C_FLAGS}")

# Some common C/C++ options
if (HAS_FLAG_STRICT_ALIASING)
  set(COMMON_FLAGS "-fno-strict-aliasing ${COMMON_FLAGS}")
endif()

option(Profiling "Compile with profiling (GNU gprof) enabled. Run gprof in the directory from which Diablo is run, not the build directory." OFF)
if (Profiling)
  set(COMMON_FLAGS "-pg ${COMMON_FLAGS}")

  if (BUILD_SHARED_LIBS)
    message(FATAL_ERROR "GNU gprof can't be used to profile shared libraries. Build a statically linked version of Diablo!")
  endif()
endif()

# Optional option. If adding ASAN is supported by the compiler, add it as a CMake option
if (HAS_FLAG_SANITIZE_ADDRESS)
  option(AddressSanitizer "Compile with Address Sanitizer enabled." OFF)
endif()
if(AddressSanitizer)
  set(COMMON_FLAGS "-fsanitize=address ${COMMON_FLAGS}")
endif()

# Optional option. If adding UBSAN is supported by the compiler, add it as a CMake option
if (HAS_FLAG_SANITIZE_UNDEFINED)
  option(UndefinedSanitizer "Compile with Undefined Behavior Sanitizer enabled. Use with UBSAN_OPTIONS=print_stacktrace=1." OFF)
endif()
if(UndefinedSanitizer)
  set(COMMON_FLAGS "-fsanitize=undefined ${COMMON_FLAGS}")
endif()

if (HAS_FLAG_SANITIZE_MEMORY)
  option(MemorySanitizer "Compile with Memory Sanitizer enabled." OFF)
  option(MemorySanitizerTrackOrigins "Track each uninitialized value with MSan (1.5x-2.5x slowdown)" OFF)
  set(MemorySanitizerRoot "" CACHE STRING "Build directory for MSan (contains lib/libc++abi.so)")
endif()
if(MemorySanitizer)
  set(COMMON_FLAGS "-fsanitize=memory -I${MemorySanitizerRoot}/include -I${MemorySanitizerRoot}/include/c++/v1 ${COMMON_FLAGS}")
  if (MemorySanitizerTrackOrigins)
    set(COMMON_FLAGS "-fsanitize-memory-track-origins ${COMMON_FLAGS}")
  endif()

  set(CMAKE_CXX_FLAGS "-stdlib=libc++ ${CMAKE_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "-L${MemorySanitizerRoot}/lib -lc++abi -Wl,-rpath,${MemorySanitizerRoot}/lib ${CMAKE_EXE_LINKER_FLAGS}")
endif()

# If possible, enable -Wall with -Wno-unused (generates too much warnings)
if (HAS_WARNING_ALL)
  if (HAS_WARNING_UNUSED)
    set(COMMON_FLAGS "-Wall -Wno-unused ${COMMON_FLAGS}")
  else (HAS_WARNING_UNUSED)
    set(COMMON_FLAGS "-Wall ${COMMON_FLAGS}")
  endif()
endif()

# Enable the -Wsign-compare warning for C++ code (not for C though, that's a lost cause)
if (HAS_WARNING_SIGN_COMPARE)
  set(CMAKE_CXX_FLAGS "-Wsign-compare ${CMAKE_CXX_FLAGS}")
endif()

# Add these common options to the C/C++ flags
set(CMAKE_CXX_FLAGS "${COMMON_FLAGS} ${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${COMMON_FLAGS} ${CMAKE_C_FLAGS}")

add_version_info_from_vcs(DIABLO_SVN_REVISION)

# Antlr
set(ANTLR_64BIT_CONF "")
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(ANTLR_64BIT_CONF "--enable-64bit")
endif()
ExternalProject_Add(Antlr
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/libantlr3c
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/antlr3c-3.3.1
  CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/antlr3c-3.3.1/configure CPPFLAGS=-I${CMAKE_CURRENT_SOURCE_DIR}/antlr3c-3.3.1/include ${ANTLR_64BIT_CONF}
  BUILD_COMMAND make
  INSTALL_COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/libantlr3c/src/Antlr-build/.libs/libantlr3c.a ${CMAKE_CURRENT_BINARY_DIR}/libantlr3c
          COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/libantlr3c/src/Antlr-build/.libs/libantlr3c.so ${CMAKE_CURRENT_BINARY_DIR}/libantlr3c
          COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/libantlr3c/src/Antlr-build/.libs/libantlr3c.so ${CMAKE_CURRENT_BINARY_DIR}/lib
)
ExternalProject_Get_Property(Antlr PREFIX)
link_directories(${PREFIX})
ExternalProject_Get_Property(Antlr SOURCE_DIR)
set(ANTLR_INCLUDE_DIR ${SOURCE_DIR}/include ${SOURCE_DIR})

# Libdwarf
ExternalProject_Add(Libdwarf
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/libdwarf
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libdwarf
  CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/libdwarf/configure --enable-shared
  BUILD_COMMAND make
  INSTALL_COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/libdwarf/src/Libdwarf-build/libdwarf/.libs/libdwarf.so ${CMAKE_CURRENT_BINARY_DIR}/libdwarf
          COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/libdwarf/src/Libdwarf-build/libdwarf/.libs/libdwarf.so ${CMAKE_CURRENT_BINARY_DIR}/lib
          COMMAND ln -s ${CMAKE_CURRENT_BINARY_DIR}/lib/libdwarf.so ${CMAKE_CURRENT_BINARY_DIR}/lib/libdwarf.so.1
)
ExternalProject_Get_Property(Libdwarf PREFIX)
link_directories(${PREFIX})
ExternalProject_Get_Property(Libdwarf SOURCE_DIR)
set(LIBDWARF_INCLUDE_DIR ${SOURCE_DIR} ${PREFIX}/src/Libdwarf-build)

# Add sub-directories
add_subdirectory(support)
add_subdirectory(object)
add_subdirectory(flowgraph)
add_subdirectory(anopt)
add_subdirectory(judy)
add_subdirectory(frontends)
add_subdirectory(obfuscation)
add_subdirectory(aspire)
add_subdirectory(jansson-2.6)
add_subdirectory(annotations)

include(Compaction.cmake)

# Some common install configuration
INSTALL(DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} DESTINATION .)

INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/self-profiling/binary_profile_to_plaintext.py DESTINATION bin)
INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/self-profiling/binary_profile_to_plaintext.py DESTINATION bin/scripts/profiles)
INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/self-profiling/reverse-translate.py DESTINATION bin/scripts/profiles)
INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/self-profiling/listfile.py DESTINATION bin/scripts/profiles)
INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/self-profiling/binutils.py DESTINATION bin/scripts/profiles)
INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/self-profiling/profile.py DESTINATION bin/scripts/profiles)

# uninstall target
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake)

# Get SVN revision number
# =======================

set(PACKAGE_VERSION "${DIABLO_MAJOR_VERSION}.${DIABLO_MINOR_VERSION}+${DIABLO_SVN_REVISION}")

if(DEB_PACKAGE_VERSION)
    set(PACKAGE_VERSION "${PACKAGE_VERSION}-${DEB_PACKAGE_VERSION}")
endif()

# Packing Diablo in a Debian package
# ===================================
SET (CPACK_SET_DESTDIR "on")
SET (CPACK_PACKAGING_INSTALL_PREFIX "/usr/local/bin")

SET (CPACK_GENERATOR "DEB")
SET (CPACK_DEBIAN_PACKAGE_MAINTAINER "Diablo Team <diablo-team@lists.ugent.be>")

set (CPACK_PACKAGE_VERSION_MAJOR ${DIABLO_MAJOR_VERSION})
set (CPACK_PACKAGE_VERSION_MINOR ${DIABLO_MINOR_VERSION})
set (CPACK_PACKAGE_VERSION ${PACKAGE_VERSION})

SET (CPACK_DEBIAN_ARCHITECTURE $ {CMAKE_SYSTEM_PROCESSOR})
SET (CPACK_DEBIAN_PACKAGE_DEPENDS "libc6, libgcc1, flex, bison")

SET (CPACK_PACKAGE_DESCRIPTION "Diablo is a retargetable link-time binary rewriting framework.")
SET (CPACK_DEBIAN_PACKAGE_HOMEPAGE "http://diablo.elis.ugent.be")

# Generate package name ourselfs
# ==============================
string(TOLOWER "${CMAKE_PROJECT_NAME}" CPACK_PACKAGE_NAME_LOWERCASE)
find_program(DPKG_PROGRAM dpkg DOC "dpkg program of Debian-based systems")
if(DPKG_PROGRAM)
    execute_process(
        COMMAND ${DPKG_PROGRAM} --print-architecture
        OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
        OUTPUT_STRIP_TRAILING_WHITESPACE
        )
    set(CPACK_PACKAGE_FILE_NAME
        "${CPACK_PACKAGE_NAME_LOWERCASE}_${PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")   

else(DPKG_PROGRAM)
    set(CPACK_PACKAGE_FILE_NAME
        "${CPACK_PACKAGE_NAME_LOWERCASE}_${PACKAGE_VERSION}_${CMAKE_SYSTEM_NAME}")
endif(DPKG_PROGRAM)
INCLUDE(CPack)

# Export the package for use from the build-tree (this registers the build-tree with a global CMake-registry)
export(PACKAGE diablo)
